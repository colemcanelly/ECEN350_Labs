$date
	Wed Nov  2 18:57:22 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALUTest_v $end
$var wire 1 ! Zero $end
$var wire 64 " BusW [63:0] $end
$var reg 4 # ALUCtrl [3:0] $end
$var reg 64 $ BusA [63:0] $end
$var reg 64 % BusB [63:0] $end
$var reg 8 & passed [7:0] $end
$scope module uut $end
$var wire 4 ' ALUCtrl [3:0] $end
$var wire 64 ( BusA [63:0] $end
$var wire 64 ) BusB [63:0] $end
$var wire 1 ! Zero $end
$var reg 64 * BusW [63:0] $end
$upscope $end
$scope task allPassed $end
$var reg 8 + numTests [7:0] $end
$var reg 8 , passed [7:0] $end
$upscope $end
$scope task passTest $end
$var reg 64 - actualOut [63:0] $end
$var reg 1 . expZero $end
$var reg 64 / expectedOut [63:0] $end
$var reg 1 0 gotZero $end
$var reg 8 1 passed [7:0] $end
$var reg 97 2 testType [96:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 2
bx 1
x0
bx /
x.
bx -
bx ,
bx +
b0 *
b101010000 )
b1000000000 (
b0 '
b0 &
b101010000 %
b1000000000 $
b0 #
b0 "
1!
$end
#40000
0!
b11100000000 "
b11100000000 *
b11100000000 $
b11100000000 (
b11100000000 %
b11100000000 )
b1 &
b1 1
b1000001010011100100010000110001 2
b0 /
1.
b0 -
10
#80000
b1000100000 "
b1000100000 *
b1001000110100 $
b1001000110100 (
b100001100100001 %
b100001100100001 )
b10 &
b10 1
b1000001010011100100010000110010 2
b11100000000 /
0.
b11100000000 -
00
#120000
b1101010000 "
b1101010000 *
b1 #
b1 '
b1000000000 $
b1000000000 (
b101010000 %
b101010000 )
b11 &
b11 1
b1000001010011100100010000110011 2
b1000100000 /
b1000100000 -
#160000
b11100000000 "
b11100000000 *
b11100000000 $
b11100000000 (
b11100000000 %
b11100000000 )
b100 &
b100 1
b10011110101001000110001 2
b1101010000 /
b1101010000 -
#200000
b101001100110101 "
b101001100110101 *
b1001000110100 $
b1001000110100 (
b100001100100001 %
b100001100100001 )
b101 &
b101 1
b10011110101001000110010 2
b11100000000 /
b11100000000 -
#240000
b1101010000 "
b1101010000 *
b10 #
b10 '
b1000000000 $
b1000000000 (
b101010000 %
b101010000 )
b110 &
b110 1
b10011110101001000110011 2
b101001100110101 /
b101001100110101 -
#280000
b111000000000 "
b111000000000 *
b11100000000 $
b11100000000 (
b11100000000 %
b11100000000 )
b111 &
b111 1
b1000001010001000100010000110001 2
b1101010000 /
b1101010000 -
#320000
b101010101010101 "
b101010101010101 *
b1001000110100 $
b1001000110100 (
b100001100100001 %
b100001100100001 )
b1000 &
b1000 1
b1000001010001000100010000110010 2
b111000000000 /
b111000000000 -
#360000
b10110000 "
b10110000 *
b110 #
b110 '
b1000000000 $
b1000000000 (
b101010000 %
b101010000 )
b1001 &
b1001 1
b1000001010001000100010000110011 2
b101010101010101 /
b101010101010101 -
#400000
1!
b0 "
b0 *
b11100000000 $
b11100000000 (
b11100000000 %
b11100000000 )
b1010 &
b1010 1
b1010011010101010100001000110001 2
b10110000 /
b10110000 -
#440000
0!
b1111111111111111111111111111111111111111111111111100111100010011 "
b1111111111111111111111111111111111111111111111111100111100010011 *
b1001000110100 $
b1001000110100 (
b100001100100001 %
b100001100100001 )
b1011 &
b1011 1
b1010011010101010100001000110010 2
b0 /
1.
b0 -
10
#480000
b101010000 "
b101010000 *
b111 #
b111 '
b1000000000 $
b1000000000 (
b101010000 %
b101010000 )
b1100 &
b1100 1
b1010011010101010100001000110011 2
b1111111111111111111111111111111111111111111111111100111100010011 /
0.
b1111111111111111111111111111111111111111111111111100111100010011 -
00
#520000
b11100000000 "
b11100000000 *
b11100000000 $
b11100000000 (
b11100000000 %
b11100000000 )
b1101 &
b1101 1
b10100000110000101110011011100110100001000110001 2
b101010000 /
b101010000 -
#560000
b100001100100001 "
b100001100100001 *
b1001000110100 $
b1001000110100 (
b100001100100001 %
b100001100100001 )
b1110 &
b1110 1
b10100000110000101110011011100110100001000110010 2
b11100000000 /
b11100000000 -
#600000
b1111 +
b1111 ,
b1111 &
b1111 1
b10100000110000101110011011100110100001000110011 2
b100001100100001 /
b100001100100001 -
