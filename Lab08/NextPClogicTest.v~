`timescale 1ns / 1ps

////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer:
//
// Create Date:   10:02:47 03/05/2009
// Design Name:   NextPClogic
// Module Name:   E:/350/Lab8/NextPClogic.v
// Project Name:  NextPClogic
// Target Device:  
// Tool versions:  
// Description: 
//
// Verilog Test Fixture created by ISE for module: NextPClogic
//
// Dependencies:
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
////////////////////////////////////////////////////////////////////////////////

`define STRLEN 12 // was 32
module NextPClogic_v;

   initial begin
      $dumpfile("NextPClogicTest.vcd");
      $dumpvars(0, NextPClogicTest_v);
   end

	task passTest;
	   input [63:0] expectOut;
	   input [63:0] actualOut;
	   input [63:0] CurrentPC;
	   input [63:0] seImm64;
	   input 	br, aluZ, unCondB;
	   input [`STRLEN*8:0] testType;
	   inout [7:0] passed;

	       if (actualOut == expectedOut) begin
                  $display("%s :: Passed\n\tCurrentPC\t= %x\n\tSEImm64\t= %x\n\tBranch\t= %x\n\tALUZero\t= %x\n\tUnCondBr\t= %x\n\tNextPC\t= %x", testType, CurrentPC, seImm64, br, aluZ, unCondB, actualOut);
		  passed = passed + 1;
	       end
	       else $display("%s :: Failed\n\tCurrentPC\t= %x\n\tSEImm64\t= %x\n\tBranch\t= %x\n\tALUZero\t= %x\n\tUnCondBr\t= %x\n\tNextPC\t= %x\tShould be: %x", testType, CurrentPC, seImm64, br, aluZ, unCondB, actualOut, expectOut);
	endtask
	
	task allPassed;
		input [7:0] passed;
		input [7:0] numTests;
		
		if(passed == numTests) $display ("All tests passed");
		else $display("Some tests failed");
	endtask

   // Inputs
   reg [63:0] 		    CurrentPC;
   reg [63:0] 		    SignExtImm64;
   reg 			    Branch, ALUZero, Uncondbranch;
   reg [7:0] 		    passed;
   
   // Outputs
   wire [63:0] 		    NextPC;

   // Instantiate the Unit Under Test (UUT)
   NextPClogic uut (
		    .NextPC(NextPC),
		    .CurrentPC(CurrentPC),
		    .SignExtImm64(SignExtImm64),
		    .Branch(Branch),
		    .ALUZero(ALUZero),
		    .Uncondbranch(Uncondbranch)
		    );

   initial begin
      // Initialize Inputs
      CurrentPC = 0;
      SignExtImm64 = 0;
      Branch = 0;
      ALUZero = 0;
      Uncondbranch = 0;
      passed = 0;
      
      // TEST VECTORS:
      {ALUCtrl, BusA, BusB} = {4'h0, 64'h200, 64'h150}; #40; passTest(Zero, BusW, 1'b1, 64'h0, "AND1", passed);
      {ALUCtrl, BusA, BusB} = {4'h0, 64'h700, 64'h700}; #40; passTest(Zero, BusW, 1'b0, 64'h700, "AND2", passed);
      {ALUCtrl, BusA, BusB} = {4'h0, 64'h1234, 64'h4321}; #40; passTest(Zero, BusW, 1'b0, 64'h220, "AND3", passed);
      {ALUCtrl, BusA, BusB} = {4'h1, 64'h200, 64'h150}; #40; passTest(Zero, BusW, 1'b0, 64'h350, "OR1", passed);
      {ALUCtrl, BusA, BusB} = {4'h1, 64'h700, 64'h700}; #40; passTest(Zero, BusW, 1'b0, 64'h700, "OR2", passed);
      {ALUCtrl, BusA, BusB} = {4'h1, 64'h1234, 64'h4321}; #40; passTest(Zero, BusW, 1'b0, 64'h5335, "OR3", passed);
      {ALUCtrl, BusA, BusB} = {4'h2, 64'h200, 64'h150}; #40; passTest(Zero, BusW, 1'b0, 64'h350, "ADD1", passed);
      {ALUCtrl, BusA, BusB} = {4'h2, 64'h700, 64'h700}; #40; passTest(Zero, BusW, 1'b0, 64'he00, "ADD2", passed);
      {ALUCtrl, BusA, BusB} = {4'h2, 64'h1234, 64'h4321}; #40; passTest(Zero, BusW, 1'b0, 64'h5555, "ADD3", passed);
      {ALUCtrl, BusA, BusB} = {4'h6, 64'h200, 64'h150}; #40; passTest(Zero, BusW, 1'b0, 64'hb0, "SUB1", passed);
      {ALUCtrl, BusA, BusB} = {4'h6, 64'h700, 64'h700}; #40; passTest(Zero, BusW, 1'b1, 64'h0, "SUB2", passed);
      {ALUCtrl, BusA, BusB} = {4'h6, 64'h1234, 64'h4321}; #40; passTest(Zero, BusW, 1'b0, 64'hffffffffffffcf13, "SUB3", passed);
      {ALUCtrl, BusA, BusB} = {4'h7, 64'h200, 64'h150}; #40; passTest(Zero, BusW, 1'b0, 64'h150, "PassB1", passed);
      {ALUCtrl, BusA, BusB} = {4'h7, 64'h700, 64'h700}; #40; passTest(Zero, BusW, 1'b0, 64'h700, "PassB2", passed);
      {ALUCtrl, BusA, BusB} = {4'h7, 64'h1234, 64'h4321}; #40; passTest(Zero, BusW, 1'b0, 64'h4321, "PassB3", passed);
      // Should be 8 tests total
      
      
      allPassed(passed, 15);
   end   
endmodule

